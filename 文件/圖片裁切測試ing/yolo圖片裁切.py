# -*- coding: utf-8 -*-
"""yolo圖片裁切.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JVfVAgvTT29LYqglbY9DbT9976XM2FkG
"""

# 安裝 YOLOv8 套件
!pip install ultralytics

# 解壓上傳的資料集
from zipfile import ZipFile
import os

zip_path = "/content/Custom Workflow Object Detection.v5i.yolov8.zip"  # <-- 你的檔案名
with ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall("/content/data")

# 檢查資料結構
!ls /content/data

# 匯入 YOLOv8
from ultralytics import YOLO

# 訓練 YOLO 模型
model = YOLO("yolov8n.pt")  # 可換成 yolov8s.pt, yolov8m.pt, yolov8l.pt

model.train(
    data="/content/data/data.yaml",  # 路徑要正確
    epochs=50,
    imgsz=640,
    batch=4,
    name="badge_model"
)

# 安裝 YOLOv8
!pip install -q ultralytics
from ultralytics import YOLO
import cv2
import matplotlib.pyplot as plt
from PIL import Image
import numpy as np
import os
import shutil

# 載入模型（放你的模型路徑）
model = YOLO("/content/runs/detect/badge_model/weights/best.pt")  # 或替換成你訓練好的.pt

# 上傳圖片（Colab 環境使用者互動）
from google.colab import files
uploaded = files.upload()

# 取得上傳圖片名稱
img_path = list(uploaded.keys())[0]

# 偵測物件
results = model(img_path)[0]

# 載入原始圖片
orig = cv2.imread(img_path)
orig = cv2.cvtColor(orig, cv2.COLOR_BGR2RGB)

if os.path.exists("cropped"):
    shutil.rmtree("cropped")
# 建立輸出資料夾
os.makedirs("cropped", exist_ok=True)

# 顯示結果圖 + 裁切區塊
for i, box in enumerate(results.boxes):
    cls_id = int(box.cls[0])
    label = results.names[cls_id]
    conf = float(box.conf[0])
    x1, y1, x2, y2 = map(int, box.xyxy[0])

    # 畫出偵測框
    cv2.rectangle(orig, (x1, y1), (x2, y2), (255,0,0), 2)
    cv2.putText(orig, f'{label} {conf:.2f}', (x1, y1 - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255,0,0), 2)

    # 裁切區塊
    cropped = orig[y1:y2, x1:x2]
    cv2.imwrite(f"cropped/{label}_{i}.jpg", cv2.cvtColor(cropped, cv2.COLOR_RGB2BGR))

# 顯示標註後的圖片
plt.figure(figsize=(12, 8))
plt.imshow(orig)
plt.axis('off')
plt.title("偵測結果")
plt.show()

# 顯示裁切的圖片
import glob
cropped_imgs = sorted(glob.glob("cropped/*.jpg"))
for path in cropped_imgs:
    img = Image.open(path)
    plt.figure()
    plt.imshow(img)
    plt.axis('off')
    plt.title(path)
    plt.show()